package com.chunyin.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chunyin.bean.Msg;
import com.chunyin.bean.Admin;
import com.chunyin.service.AdminService;
import com.fasterxml.jackson.databind.util.JSONPObject;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

/**
 * 管理员controller
 * 
 * @author Administrator
 *
 */
@Controller
public class AdminController {

	@Autowired
	AdminService adminService;

	/**
	 * 查询单个页面管理员
	 */
	@ResponseBody
	@RequestMapping("selectOnePageAdmin")
	public Object selectOnePageAdmin(@RequestParam(value = "pn", defaultValue = "1") Integer pn) {
		PageHelper.startPage(pn, 5);

		List<Admin> list = adminService.selectOnePageAdmin();

		PageInfo<Admin> pageInfo = new PageInfo<Admin>(list);

		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按id查询并返回管理员
	 */
	@ResponseBody
	@RequestMapping("selectAdminById")
	public Msg selectAdminById(int id) {
		Admin admin = adminService.selectAdminById(id);
		if (admin != null) {
			return Msg.success().add("Admin", admin);
		}
		return Msg.error();
	}
	
	/**
	 * 用户登录
	 */
	@ResponseBody
	@RequestMapping("adminLogin")
	public Msg adminLogin(String account, String password) {
		List<Admin> adminList = adminService.adminLogin(account, password);
		if (adminList.size() != 0) {
			int id = adminList.get(0).getAdminId();
			return Msg.success().add("adminId", id);
		}
		return Msg.error();
	}

	/**
	 * 添加管理员
	 */
	@ResponseBody
	@RequestMapping("insertAdmin")
	public Msg insertAdmin(@Valid Admin Admin, BindingResult result) {
		if (result.hasErrors()) {
			Map<String, Object> map = new HashMap<String, Object>();
			List<FieldError> list = result.getFieldErrors();
			for (FieldError fieldError : list) {
				map.put(fieldError.getField(), fieldError.getDefaultMessage());
			}
			return Msg.error().add("msg", map);
		}
		adminService.insertAdmin(Admin);

		return Msg.success();
	}

	/**
	 * 按id删除管理员
	 */
	@ResponseBody
	@RequestMapping("deleteAdminById")
	public Msg deleteAdminById(int id) {
		int flag = adminService.deleteAdminById(id);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 根据checkbox和id删除选中管理员
	 */
	@ResponseBody
	@RequestMapping("deleteAdminByCheckBox")
	public Msg deleteAdminByCheckBox(String ids) {
		if (ids.contains("-")) {
			List<Integer> list = new ArrayList<Integer>();
			String[] str_ids = ids.split("-");
			for (String id : str_ids) {
				list.add(Integer.parseInt(id));
			}
			adminService.deleteAdminByCheckBox(list);
		} else {
			adminService.deleteAdminById(Integer.parseInt(ids));
		}
		return Msg.success();
	}

	/**
	 * 按id修改管理员密码
	 */
	@ResponseBody
	@RequestMapping("updateAdminPassword")
	public Msg updateAdminPassword(int id, String password) {
		int flag = adminService.updateAdminPassword(id, password);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 按id修改管理员信息
	 */
	@ResponseBody
	@RequestMapping("updateAdminInformation")
	public Msg updateAdminInformation(Admin Admin) {
		int flag = adminService.updateAdminInformation(Admin);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 检查重复账号名
	 */
	@ResponseBody
	@RequestMapping("checkAdminAccount")
	public Msg checkAdminAccount(String account) {
		int flag = adminService.checkAdminAccount(account);
		if (flag == 0) {// 如果未找到则账号可用，返回success
			return Msg.success().add("msg", "账户名可用");
		}
		return Msg.error().add("msg", "账户名已被占用");
	}
}
