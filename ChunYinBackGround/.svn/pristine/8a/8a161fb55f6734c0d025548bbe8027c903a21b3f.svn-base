package com.chunyin.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chunyin.bean.Msg;
import com.chunyin.bean.Sheet;
import com.chunyin.bean.Song;
import com.chunyin.service.SheetService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

/**
 * 歌单controller
 * 
 * @author Administrator
 *
 */
@Controller
public class SheetController {

	@Autowired
	SheetService sheetService;

	/**
	 * 按歌单id查询歌单
	 * 
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping("selectSheetBySheetId")
	public Msg selectSheetBySheetId(int sheetId) {
		Sheet sheet = sheetService.selectSheetBySheetId(sheetId);
		if (sheet == null) {
			return Msg.error();
		}
		String ids = sheet.getSheetList();
		List<Integer> list = new ArrayList<Integer>();
		List<Song> songs = new ArrayList<Song>();
		if (ids.isEmpty()) {

		}
		if (ids.contains("-")) {

			String[] str_ids = ids.split("-");
			for (String song_id : str_ids) {
				list.add(Integer.parseInt(song_id));
			}
			songs = sheetService.selectSheetSongByIds(list);
		} else if (ids.isEmpty()) {
			System.out.println("歌单里没有歌曲");
		} else {
			list.add(Integer.parseInt(ids));
			songs = sheetService.selectSheetSongByIds(list);
		}
		Map<String, Object> sheetList = new HashMap<String, Object>();
		sheetList.put("songList", songs);
		sheetList.put("sheet", sheet);
		return Msg.success().add("sheetList", sheetList);
	}

	/**
	 * 按用户id查询歌单列表
	 */
	@ResponseBody
	@RequestMapping("selectSheetsByUserId")
	public Msg selectSheetsByUserId(int userId) {
		List<Sheet> sheet = sheetService.selectSheetsByUserId(userId);
		if (sheet == null) {
			return Msg.error();
		}
		List<Map<String, Object>> SheetList = new ArrayList<Map<String, Object>>();

		// 循环获取每个歌单里的歌曲列表
		for (Sheet s : sheet) {
			String ids = s.getSheetList();
			List<Integer> list = new ArrayList<Integer>();

			// 接收获取到的所有歌曲
			List<Song> songs = new ArrayList<Song>();
			if (ids.contains("-")) {// 多首歌曲的情况
				String[] str_ids = ids.split("-");

				for (String song_id : str_ids) {
					list.add(Integer.parseInt(song_id));
				}
				songs = sheetService.selectSheetSongByIds(list);
			} else if (ids.isEmpty()) {// 没有歌的情况
				System.out.println("歌单里没有歌曲");
			} else {// 只有一首歌的情况
				list.add(Integer.parseInt(ids));
				songs = sheetService.selectSheetSongByIds(list);
			}
			// 封装歌单信息和歌曲列表
			Map<String, Object> sheetSong = new HashMap<String, Object>();
			sheetSong.put("sheet", s);
			sheetSong.put("songList", songs);

			// 将封装的歌单map 添加到歌单列表
			SheetList.add(sheetSong);
		}
		return Msg.success().add("SheetList", SheetList);
	}

	/**
	 * 按歌单名模糊查询歌单
	 * 
	 * @param sheetId
	 * @param userId
	 * @return
	 */
	@ResponseBody
	@RequestMapping("selectSheetsByName")
	public Msg selectSheetByName(@RequestParam(value = "pn", defaultValue = "1") Integer pn, String name) {
		PageHelper.startPage(pn, 12);
		// 获取查询到的所有歌单
		List<Sheet> sheet = sheetService.selectSheetsByName(name);
		if (sheet == null) {
			return Msg.error();
		}
		// 歌单列表，每个map里是歌单信息和歌曲列表
		List<Map<String, Object>> SheetList = new ArrayList<Map<String, Object>>();

		// 循环获取每个歌单里的歌曲列表
		for (Sheet s : sheet) {
			String ids = s.getSheetList();
			List<Integer> list = new ArrayList<Integer>();

			// 接收获取到的所有歌曲
			List<Song> songs = new ArrayList<Song>();
			if (ids.contains("-")) {// 多首歌曲的情况
				String[] str_ids = ids.split("-");

				for (String song_id : str_ids) {
					list.add(Integer.parseInt(song_id));
				}
				songs = sheetService.selectSheetSongByIds(list);
			} else if (ids.isEmpty()) {// 没有歌的情况
				System.out.println("歌单里没有歌曲");
			} else {// 只有一首歌的情况
				list.add(Integer.parseInt(ids));
				songs = sheetService.selectSheetSongByIds(list);
			}
			// 封装歌单信息和歌曲列表
			Map<String, Object> sheetSong = new HashMap<String, Object>();
			sheetSong.put("sheet", s);
			sheetSong.put("songList", songs);

			// 将封装的歌单map 添加到歌单列表
			SheetList.add(sheetSong);
		}
		PageInfo<Map<String, Object>> pageInfo = new PageInfo<Map<String, Object>>(SheetList);
		return Msg.success().add("pageInfo", pageInfo);
	}

	/**
	 * 新建歌单
	 */
	@ResponseBody
	@RequestMapping("insertNewSheet")
	public Msg insertNewSheet(String name, int userId) {
		int flag = sheetService.insertNewSheet(name, userId);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 修改歌单名字
	 */
	@ResponseBody
	@RequestMapping("updateSheetNameById")
	public Msg updateSheetNameById(String name, int id) {
		int flag = sheetService.updateSheetNameById(name, id);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 添加歌曲到歌单
	 */
	@ResponseBody
	@RequestMapping("insertSongToSheet")
	public Msg insertSongToSheet(int songId, int sheetId) {
		Sheet sheet = sheetService.selectSheetBySheetId(sheetId);

		if (sheet.getSheetSongNums() == 0 || sheet.getSheetList().isEmpty()) {
			sheet.setSheetSongNums(1);
			sheet.setSheetList(songId + "");

		} else {
			sheet.setSheetSongNums(sheet.getSheetSongNums() + 1);
			sheet.setSheetList(sheet.getSheetList() + "-" + songId);
		}
		int flag = sheetService.updateSheetSongsBySheet(sheet);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 删除歌单里的歌曲
	 */
	@ResponseBody
	@RequestMapping("deleteSongFromSheet")
	public Msg deleteSongFromSheet(int songId, int sheetId) {
		Sheet sheet = sheetService.selectSheetBySheetId(sheetId);
		
		if(sheet.getSheetSongNums() == 0 || sheet.getSheetList().isEmpty()){
			return Msg.error().add("massge", "歌单为空");
		}
		int nums = sheet.getSheetSongNums();
		
		String ids = sheet.getSheetList();
		List<String> list = new ArrayList<String>();

		if (ids.contains("-")) {// 多首歌曲的情况
			String[] str_ids = ids.split("-");

			for (String song_id : str_ids) {
				if(Integer.parseInt(song_id)==songId){
					nums--;
					continue;
				}	
				list.add(song_id);
			}
			if(nums == sheet.getSheetSongNums()){//未找到与songId匹配的歌曲
				return Msg.error().add("massge", "未找到该歌曲");
			}
			String newIds = String.join("-", list);
			sheet.setSheetList(newIds);
			sheet.setSheetSongNums(nums);
		}else {// 只有一首歌的情况
			if(songId != Integer.parseInt(ids)){//未找到与songId匹配的歌曲
				return Msg.error().add("massge", "未找到该歌曲");
			}
			sheet.setSheetSongNums(0);
			sheet.setSheetList("");
		}
		
		int flag = sheetService.updateSheetSongsBySheet(sheet);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}
}
