package com.chunyin.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chunyin.bean.Msg;
import com.chunyin.service.AdminService;
import com.chunyin.bean.Admin;
import com.fasterxml.jackson.databind.util.JSONPObject;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;


/**
 * 管理员controller
 * @author Administrator
 *
 */
@Controller
public class AdminController {
	
	@Autowired
	AdminService adminService;
	
	/**
	 * 查询单个页面管理员
	 */
	@ResponseBody
	@RequestMapping("selectOnePageAdmin")
	public Object selectOnePageAdmin(@RequestParam(value="pn",defaultValue="1") Integer pn,String callback){
		PageHelper.startPage(pn, 5);
		
		List<Admin> list = adminService.selectOnePageAdmin();
		
		PageInfo<Admin> pageInfo = new PageInfo<Admin>(list);
		
		if(list.size()!=0){
			return new JSONPObject(callback, Msg.success().add("pageInfo", pageInfo));
		}
		return new JSONPObject(callback,Msg.error());
	}
	
	/**
	 * 按id查询并返回管理员
	 */
	@ResponseBody
	@RequestMapping("selectAdminById")
	public Object selectAdminById(int id,String callback){
		Admin admin = adminService.selectAdminById(id);
		if(admin!=null){
			return new JSONPObject(callback, Msg.success().add("Admin", admin));
		}
		return new JSONPObject(callback,Msg.error());
	}
	
	/**
	 *添加管理员 
	 */
	@ResponseBody
	@RequestMapping("insertAdmin")
	public Object insertAdmin(@Valid Admin admin,BindingResult result, String callback){
		if(result.hasErrors()){
			Map<String,Object> map = new HashMap<String,Object>();
			List<FieldError> list = result.getFieldErrors();
			for (FieldError fieldError : list) {
				map.put(fieldError.getField(), fieldError.getDefaultMessage());
			}
			return new JSONPObject(callback,Msg.error().add("msg", map));
		}
		adminService.insertAdmin(admin);
		
		return new JSONPObject(callback, Msg.success());
	}
	
	/**
	 * 按id删除管理员
	 */
	@ResponseBody
	@RequestMapping("deleteAdminById")
	public Object deleteAdminById(int id,String callback){
		int flag = adminService.deleteAdminById(id);
		if(flag != 0){
			return new JSONPObject(callback, Msg.success());
		}
		return new JSONPObject(callback,Msg.error());
	}
	
	/**
	 * 根据checkbox和id删除选中管理员
	 */
	@ResponseBody
	@RequestMapping("deleteAdminByCheckBox")
	public Object deleteAdminByCheckBox(String ids){
		if(ids.contains("-")){
			List<Integer> list = new ArrayList<Integer>();
			String[] str_ids = ids.split("-");
			for (String id : str_ids) {
				list.add(Integer.parseInt(id));
			}
			adminService.deleteAdminByCheckBox(list);
		}else{
			adminService.deleteAdminById(Integer.parseInt(ids));
		}
		return Msg.success();
	}
	
	/**
	 * 按id修改管理员密码
	 */
	@ResponseBody
	@RequestMapping("updateAdminPassword")
	public Object updateAdminPassword(int id,String password,String callback){
		int flag = adminService.updateAdminPassword(id,password);
		if(flag != 0){
			return new JSONPObject(callback, Msg.success());
		}
		return new JSONPObject(callback,Msg.error());
	}
	
	/**
	 * 按id修改管理员信息
	 */
	@ResponseBody
	@RequestMapping("updateAdminInformation")
	public Object updateAdminInformation(Admin Admin,String callback){
		int flag = adminService.updateAdminInformation(Admin);
		if(flag != 0){
			return new JSONPObject(callback, Msg.success());
		}
		return new JSONPObject(callback,Msg.error());
	}
	
	/**
	 * 检查重复账号名
	 */
	@ResponseBody
	@RequestMapping("checkAdminAccount")
	public Object checkAdminAccount(String account,String callback){
		int flag = adminService.checkAdminAccount(account);
		if(flag == 0){//如果未找到则账号可用，返回success
			return new JSONPObject(callback, Msg.success().add("msg","账户名可用"));
		}
		return new JSONPObject(callback,Msg.error().add("msg", "账户名已被占用"));
	}
}
