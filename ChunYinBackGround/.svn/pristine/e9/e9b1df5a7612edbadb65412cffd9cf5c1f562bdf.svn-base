package com.chunyin.controller;

import java.util.ArrayList;
import java.util.Base64.Decoder;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.chunyin.bean.Msg;
import com.chunyin.bean.Song;
import com.chunyin.bean.User;
import com.chunyin.service.SongService;
import com.fasterxml.jackson.databind.util.JSONPObject;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

/**
 * 歌曲controller
 * 
 * @author Administrator
 *
 */
@Controller
public class SongController {

	@Autowired
	SongService songService;

	/**
	 * 查询所有歌曲
	 */
	@ResponseBody
	@RequestMapping("selectAllSong")
	public Msg selectAllSong(String callback) {

		List<Song> list = songService.selectAllSong();

		if (list.size() != 0) {
			return Msg.success().add("list", list);
		}
		return Msg.error();
	}

	/**
	 * 查询单个页面歌曲
	 */
	@ResponseBody
	@RequestMapping("selectOnePageSong")
	public Msg selectOnePageSong(@RequestParam(value = "pn", defaultValue = "1") Integer pn) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectAllSong();
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按id查询并返回歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongById")
	public Msg selectSongById(int id) {
		Song song = songService.selectSongById(id);
		if (song != null) {
			return Msg.success().add("song", song);
		}
		return Msg.error();
	}

	/**
	 * 按歌名查询并返回歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongByName")
	public Msg selectSongByName(@RequestParam(value = "pn", defaultValue = "1") Integer pn, String name) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectSongByName(name);
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按作曲人id查询并返回歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongByComposerId")
	public Msg selectSongByComposerId(@RequestParam(value = "pn", defaultValue = "1") Integer pn, int id) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectSongByComposerId(id);
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按类别id查询并返回歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongByClassId")
	public Msg selectSongByClassId(@RequestParam(value = "pn", defaultValue = "1") Integer pn, int id) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectSongByClassId(id);
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按点击数和歌名song_name查询并排序歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongByNameAndOrderByHits")
	public Msg selectSongByNameAndOrderByHits(@RequestParam(value = "pn", defaultValue = "1") Integer pn, String name) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectSongByNameAndOrderByHits(name);
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按点击数和类别class查询并排序歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongByClassAndOrderByHits")
	public Msg selectSongByClassAndOrderByHits(@RequestParam(value = "pn", defaultValue = "1") Integer pn, int id) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectSongByClassAndOrderByHits(id);
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 按点击数和作曲人composer_id查询并排序歌曲
	 */
	@ResponseBody
	@RequestMapping("selectSongByComposerAndOrderByHits")
	public Msg selectSongByComposerAndOrderByHits(@RequestParam(value = "pn", defaultValue = "1") Integer pn, int singer_id) {
		PageHelper.startPage(pn, 10);

		List<Song> list = songService.selectSongByComposerAndOrderByHits(singer_id);
		PageInfo<Song> pageInfo = new PageInfo<Song>(list);
		if (list.size() != 0) {
			return Msg.success().add("pageInfo", pageInfo);
		}
		return Msg.error();
	}

	/**
	 * 添加歌曲
	 * 
	 * @param song
	 * @param callback
	 * @return
	 */
	@ResponseBody
	@RequestMapping("insertSong")
	public Msg insertSong(Song song) {
		
		int flag = songService.insertSong(song);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 修改歌曲信息
	 */
	@ResponseBody
	@RequestMapping("updateSongInfo")
	public Msg updateSongInfo(Song song) {
		int flag = songService.updateSongInfo(song);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 按id删除歌曲
	 */
	@ResponseBody
	@RequestMapping("deleteSongById")
	public Msg deleteSongById(int id) {
		int flag = songService.deleteSongById(id);
		if (flag != 0) {
			return Msg.success();
		}
		return Msg.error();
	}

	/**
	 * 根据checkbox和id删除选中歌曲
	 */
	@ResponseBody
	@RequestMapping("deleteSongByCheckBox")
	public Msg deleteSongByCheckBox(String ids) {
		if (ids.contains("-")) {
			List<Integer> list = new ArrayList<Integer>();
			String[] str_ids = ids.split("-");
			for (String id : str_ids) {
				list.add(Integer.parseInt(id));
			}
			songService.deleteSongByCheckBox(list);
		} else {
			songService.deleteSongById(Integer.parseInt(ids));
		}
		return Msg.success();
	}
}
